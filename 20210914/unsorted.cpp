// Implementation file for Unsorted.h#include "unsorted.h"UnsortedType::UnsortedType(){  length = 0;}bool UnsortedType::IsFull() const{  return (length == MAX_ITEMS);}int UnsortedType::LengthIs() const{  return length;}void UnsortedType::RetrieveItem(ItemType& item, bool& found) // Pre:  Key member(s) of item is initialized. // Post: If found, item's key matches an element's key in the //       list and a copy of that element has been stored in item; //       otherwise, item is unchanged. {  bool moreToSearch;  int location = 0;  found = false;  moreToSearch = (location < length);  while (moreToSearch && !found)   {    switch (item.ComparedTo(info[location]))    {      case LESS    :       case GREATER : location++;                     moreToSearch = (location < length);                     break;      case EQUAL   : found = true;                     item = info[location];                     break;    }  }}void UnsortedType::InsertItem(ItemType item)// Post: item is in the list.{  info[length] = item;  length++;}void UnsortedType::DeleteItem(ItemType item)// Pre:  item's key has been initialized.//       An element in the list has a key that matches item's.// Post: No element in the list has a key that matches item's.{  int location = 0;  while (item.ComparedTo(info[location]) != EQUAL)    location++;  info[location] = info[length - 1];  length--;}void UnsortedType::ResetList()// Post: currentPos has been initialized.{  currentPos = -1;}void UnsortedType::GetNextItem(ItemType& item)// Post: item is current item.//       Current position has been updated.{  currentPos++;  item = info[currentPos];}void UnsortedType::DeleteItem_a(ItemType item){    int location = 0;    while (item.ComparedTo(info[location]) != EQUAL)    {        location++;        if (location == (length - 1))        {            break;        }    }    if (location != (length - 1))    {        info[location] = info[length - 1];        length--;    }}void UnsortedType::DeleteItem_c(ItemType item){    int temp[MAX_ITEMS];    int num = 0;    for (int i = 0;i < length;i++)    {        if (item.ComparedTo(info[i]) == EQUAL && item.ComparedTo(info[length - 1]) != EQUAL)        {            info[i] = info[length - 1];            temp[num] = i;            num++;            length--;        }        else if (item.ComparedTo(info[i]) == EQUAL && item.ComparedTo(info[length - 1]) == EQUAL)        {        }    }        for (int j = 0;j < num;j++)    {        if(info[length - 1] != info[temp[j]])        info[temp[j]] = info[length - 1];        length--;    }}